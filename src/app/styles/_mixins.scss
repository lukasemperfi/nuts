@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "variables" as variables;

$breakpoints: (
  sm: variables.$breakpoint-sm,
  md: variables.$breakpoint-md,
  lg-sm: variables.$breakpoint-lg-sm,
  lg: variables.$breakpoint-lg,
  xl: variables.$breakpoint-xl,
);

$breakpoints-down: (
  sm: variables.$breakpoint-sm - 1,
  md: variables.$breakpoint-md - 1,
  lg-sm: variables.$breakpoint-lg-sm - 1,
  lg: variables.$breakpoint-lg - 1,
  xl: variables.$breakpoint-xl - 1,
);

@mixin respond-to($bp, $direction: "max") {
  $operator: if($direction == "max", "max-width", "min-width");
  $breakpoints-map: if($direction == "max", $breakpoints-down, $breakpoints);

  @if map.has-key($breakpoints-map, $bp) {
    $value: map.get($breakpoints-map, $bp);
    @media (#{$operator}: #{$value}) {
      @content;
    }
  } @else if meta.type-of($bp) == "number" and math.is-unitless($bp) {
    @media (#{$operator}: #{$bp}px) {
      @content;
    }
  } @else if meta.type-of($bp) == "number" or meta.type-of($bp) == "string" {
    @media (#{$operator}: #{$bp}) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$bp}`.";
  }
}

///////////////////////////////////////

@function round-decimal($number, $digits: 3) {
  $multiplier: math.pow(10, $digits);
  @return math.div(math.round($number * $multiplier), $multiplier);
}

@function to-percent($pos, $val, $cw, $ch) {
  @if ($pos == top or $pos == bottom) {
    @return round-decimal(math.div($val, $ch) * 100%, 3);
  } @else if ($pos == left or $pos == right) {
    @return round-decimal(math.div($val, $cw) * 100%, 3);
  }
}

@mixin position-percent(
  $pos1,
  $val1,
  $pos2,
  $val2,
  $container-w,
  $container-h
) {
  #{$pos1}: to-percent($pos1, $val1, $container-w, $container-h);
  #{$pos2}: to-percent($pos2, $val2, $container-w, $container-h);
}

/////////////////////////

@mixin responsive-size(
  $width,
  $height,
  $max-size,
  $viewport-width,
  $dimension: "width"
) {
  $property: if($dimension == "height", height, width);
  $base-size: if($dimension == "height", $height, $width);

  #{$property}: clamp(
    #{$base-size}px,
    #{round-decimal(math.div($base-size * 100, $viewport-width), 3)}vw,
    #{$max-size}px
  );
  aspect-ratio: #{$width} / #{$height};
}

/////////////////////////////

@mixin flex(
  $direction: row,
  $justify: flex-start,
  $align: stretch,
  $wrap: nowrap,
  $gap: 0
) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
  @if $gap != 0 {
    gap: $gap;
  }
}
